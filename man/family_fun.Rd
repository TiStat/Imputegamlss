% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/samplecensored.R
\name{family_fun}
\alias{family_fun}
\title{Evaluate GAMLSS family functions from gamlss object}
\usage{
family_fun(object, func = c("d", "p", "q", "r"), fitdata, predictdata,
  p = NULL, q = NULL, x = NULL, n = NULL, ...)
}
\arguments{
\item{object}{gamlss fit object}

\item{func}{character. "d", "p", "q", "r" for either density, distribution function,
quantile or random data generation.}

\item{fitdata}{dataframe. Data used as input.}

\item{predictdata}{dataframe. Containing the observations for which the
parameters are predicted.}

\item{p}{scalar numeric. Probability value if quantile function used.}

\item{x, q}{scalar numeric. Quantile value if density or probability function
used respectively.}

\item{n}{scalar numeric. Number of observations if random generator function used.}

\item{...}{argumenst to be passed to the called distributional function.}
}
\value{
Depending on the choice of func, the respective vector of
  (d)density-, (p)probability- , (q)quantile- or (r)random values is returned.
}
\description{
Function that, given a "gamlss" object, evaluates the
  distribution-specific functions under predicted parameters of the provided dataframe
  "predictdata". \cr
  The distribution-specific functions are density, cumulative distribution function, quantile
  function and random generation for the given family of the gamlss object. \cr
  CAUTION: Exactly ONE of the arguments x, q, p, n MUST be specfied! \cr
  Also make sure that n is a multiple of nrow(predictdata)!
}
\examples{
# Simulating a dataset
ld <- simulateData(n= 300,
param.formula = list(mu = ~exp(x1) + x2 + x3, sigma = ~sin(x2)),
name = 'x1', subset = ~ (x2 < 0.3 & x3 < 0.4), prob = 0.8, 
damage =c(0.3, 0.9), family = 'NO', 
correlation = NULL)$defected

# Fitting a gamlss model
lmodel <- gamlss(formula = y ~ . -indicator, data=ld)
nl <- length(ld$x1[ld$indicator==1])
lpredict.df <- data.frame(x1 = runif(n = nl), x2 = runif(n = nl), x3 = runif(n = nl), indicator = 1)
family_fun(lmodel, func = 'r',ld, lpredict.df, n = nrow(lpredict.df))
}
